module.exports = function (grunt) {
	
	// Initialize configuration object
	grunt.initConfig({

		// Read in project settings
		pkg: grunt.file.readJSON('package.json'),

		// User editable project settings & variables
		options: {
			// Base path to your assets folder
			base: '{{assets_path}}',

			// Published assets path
			publish: '{{publish_path}}',

			// Files to be cleaned on rebuild
			clean: {
				all: ['<%= options.css.concat %>', '<%= options.css.min %>', '<%= options.less.compiled %>',
					'<%= options.sass.compiled %>', '<%= options.stylus.compiled %>', '<%= options.js.min %>',
					'<%= options.js.concat %>', '<%= options.less.compiled %>'],
				concat: ['<%= options.css.concat %>', '<%= options.js.concat %>']
			},

			// CSS settings
			css: {
				base: '<%= options.base %>/{{css_path}}',			 				// Base path to your CSS folder
				files: [ {{css_files}} ],						// CSS files in order you'd like them concatenated and minified
				concat: '<%= options.css.base %>/concat.css',	// Name of the concatenated CSS file
				publish: '<%= options.publish %>/{{css_subfolder}}',
				min: '<%= options.css.publish %>/{{css_target_file}}'		// Name of the minified CSS file
			},

			// JavaScript settings
			js: {
				base: '<%= options.base %>/{{js_path}}',							// Base path to your JS folder
				files: [ {{js_files}} ],						// JavaScript files in order you'd like them concatenated and minified
				concat: '<%= options.js.base %>/concat.js',		// Name of the concatenated JavaScript file
				publish: '<%= options.publish %>/{{javascript_subfolder}}',
				min: '<%= options.js.publish %>/{{js_target_file}}'		// Name of the minified JavaScript file
			},

			// LESS Settings
			less: {
				base: '<%= options.base %>/{{less_path}}',							// Base path to you LESS folder
				file: '{{less_file}}',							// LESS file (ideally, one file which contains imports)
				compiled: '<%= options.css.base %>/less.css'	// Name of the compiled LESS file
			},

			// SASS Settings
			sass: {
				base: '<%= options.base %>/{{sass_path}}',							// Base path to you SASS folder
				file: '{{sass_file}}',							// SASS file (ideally, one file which contains imports)
				compiled: '<%= options.css.base %>/sass.css'	// Name of the compiled SASS file
			},

			// STYLUS Settings
			stylus: {
				base: '<%= options.base %>/{{stylus_path}}',							// Base path to you STYLUS folder
				file: '{{stylus_file}}',							// STYLUS file (ideally, one file which contains imports)
				compiled: '<%= options.css.base %>/stylus.css'		// Name of the compiled STYLUS file
			},

			// Notification messages
			notify: {
				watch: {
					title: 'Live Reloaded!',
					message: 'Files were modified, recompiled and site reloaded'
				}
			},

			// // Files and folders to watch for live reload and rebuild purposes
			// watch: {
			// 	files: ['<%= options.js.files %>', '<%= options.css.files %>', '<%= options.less.base %>/*.less',
			// 	 '<%= options.sass.base %>/*.sass', '<%= options.sass.base %>/*.scss',
			// 	 '<%= options.stylus.base %>/*.styl', '<%= options.handlebars.template_folder %>/*/*.hbs',
			// 	 '!<%= options.js.min %>', '!<%= options.less.compiled %>', '!<%= options.sass.compiled %>',
			// 	 '!<%= options.stylus.compiled %>']
			// },
			
			handlebars: {
				template_folder: '{{handlebars_folder}}',
				namespace: '{{handlebars_namespace}}',
				filename: '{{handlebars_filename}}'
			},

			images: {
				src_path: '<%= options.publish %>/{{image_folder}}',
				publish_path: '<%= options.publish %>/{{image_folder}}'
			}
		},

		// Clean files and folders before replacement
		clean: {
			all: {
				src: '<%= options.clean.all %>'
			},
			concat: {
				src: '<%= options.clean.concat %>'
			}
		},

		copy: {
			css: {
				files: [{
					expand: true,
					cwd: '<%= options.css.base %>/',
					src: ['**/*.css'],
					dest: '<%= options.css.publish %>/'
				}]
			},
			js: {
				files: [{
					expand: true,
					cwd: '<%= options.js.base %>/',
					src: ['**/*.js'],
					dest: '<%= options.js.publish %>/'
				}]
			}
		},

		// Concatenate multiple sets of files
		concat: {
			css: {
				files: {
					'<%= options.css.concat %>' : ['<%= options.css.files %>']
				}
			},
			js: {
				options: {
					block: true,
					line: true,
					stripBanners: true
				},
				files: {
					'<%= options.js.concat %>' : '<%= options.js.files %>',
				}
			}
		},

		// Minify and concatenate CSS files
		cssmin: {
			minify: {
	       		src: '<%= options.css.concat %>',
	        	dest: '<%= options.css.min %>'
			}
		},

		// Javascript linting - JS Hint
		jshint: {
			files: ['<%= options.js.files %>'],
			options: {
				// Options to override JSHint defaults
				curly: true,
				indent: 4,
				trailing: true,
				devel: true,
				globals: {
					jQuery: true
				}
			}
		},

		// Compile LESS files
		less: {
			main: {
				options: {
					yuicompress: true,
					ieCompat: true
				},
				files: {
					'<%= options.less.compiled %>': '<%= options.less.base %>/<%= options.less.file %>'
				}
			}
		},

		// Compile SASS files
		sass: {
		    main: {
		        files: {
		        	'<%= options.sass.compiled %>': '<%= options.sass.base %>/<%= options.sass.file %>'
		        }
		    }
		},

		// Compile STYLUS files
		stylus: {
		    main: {
		        files: {
		        	'<%= options.stylus.compiled %>': '<%= options.stylus.base %>/<%= options.stylus.file %>'
		        }
		    }
		},

		// Display notifications
		notify: {
			watch: {
				options: {
					title: '<%= options.notify.watch.title %>',
					message: '<%= options.notify.watch.message %>'
				}
			}
		},

		// Javascript minification - uglify
		uglify: {
			options: {
				preserveComments: false
			},
			files: {
				src: '<%= options.js.concat %>',
				dest: '<%= options.js.min %>'
			}
		},

		// Watch for files and folder changes
		watch: {
			scss: {
				files: ['<%= options.sass.base %>/**/*.scss'],
				tasks: 'sass'
			},
			js: {
				files: ['<%= options.js.base %>/**/*.js'],
				tasks: 'jshint'
			},
			handlebars: {
				files: ['<%= options.handlebars.template_folder %>/**/*.hbs'],
				tasks: 'handlebars'
			},
			css: {
				files: ['<%= options.css.base %>/**/*.css'],
				tasks: 'newer:copy:css'
			},
			js: {
				files: ['<%= options.js.base %>/**/*.js'],
				tasks: 'newer:copy:js'
			},
			livereload: {
				options: {
				  livereload: true
				},
				files: [
				  '<%= options.css.publish %>/{,*/}*.css',
				  '<%= options.js.publish %>/{,*/}*.js'
				]
			},
		},

		//Compile Handlebars templates
		handlebars: {
			compile: {
				'<%= options.js.publish %>/<%= options.handlebars.filename %>' : ['<%= options.handlebars.template_folder %>/*.hbs']
			},
			options: {
				namespace: '<%= options.handlebars.namespace %>',
				wrapped: true,
				// Remove foldername and extension from template key
				processName: function(filename) {
					var parts = '<%= options.handlebars.template_folder %>'.split('*'),
					    regex1 = new RegExp('^' + parts[0], 'gi'),
					    regex2 = new RegExp('\\' + parts[1] + '$', 'gi');
					return filename.replace(regex1).replace(regex2);
				}
			}
		},

		imagemin: {
		    dynamic: {                         // Another target
				files: [{
					expand: true,                  // Enable dynamic expansion
					src: ['<%= options.images.src_path %>/**/*.{png,jpg,gif}'],   // Actual patterns to match
					dest: '<%= options.images.publish_path %>/'                  // Destination path prefix
				}]
		    }
		}
	});

	// Load npm tasks
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('grunt-contrib-compress');
	grunt.loadNpmTasks('grunt-contrib-concat');
	grunt.loadNpmTasks('grunt-contrib-copy');
	grunt.loadNpmTasks('grunt-contrib-cssmin');
	grunt.loadNpmTasks('grunt-contrib-jshint');
	grunt.loadNpmTasks('grunt-contrib-less');
	grunt.loadNpmTasks('grunt-contrib-sass');
	grunt.loadNpmTasks('grunt-contrib-stylus');
	grunt.loadNpmTasks('grunt-contrib-livereload');
	grunt.loadNpmTasks('grunt-contrib-uglify');
	grunt.loadNpmTasks('grunt-contrib-watch');
	grunt.loadNpmTasks('grunt-notify');
	grunt.loadNpmTasks('grunt-contrib-handlebars');
	grunt.loadNpmTasks('grunt-contrib-imagemin');
	grunt.loadNpmTasks('grunt-newer');

	// Register tasks
	grunt.registerTask('dev', [{{tasks}} 'copy:js', 'copy:css']);
	grunt.registerTask('default', ['clean:all', {{tasks}} 'concat:css', 'concat:js', 'cssmin', 'uglify', 'clean:concat', 'imagemin']); // Default task
}